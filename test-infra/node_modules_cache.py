#!/usr/bin/env python2.7
from __future__ import absolute_import, unicode_literals, print_function, division

from sys import argv
from os import environ, stat, remove as _delete_file
from os.path import isfile
from hashlib import sha256
from subprocess import check_call as run

from boto.s3.connection import S3Connection
from boto.s3.key import Key
from boto.s3.lifecycle import Lifecycle


NODE_MODULES_TARBALL = 'node_modules.tar.gz'
NEED_TO_UPLOAD_MARKER = '.need-to-upload'
LIFETIME_IN_DAYS = 30
try:
    BUCKET_NAME = environ['TWBS_S3_BUCKET']
except KeyError:
    raise SystemExit("TWBS_S3_BUCKET environment variable not set!")


def setup_bucket():
    bucket = conn.create_bucket(BUCKET_NAME)
    bucket.set_acl('private')
    lifecycle = Lifecycle()
    lifecycle.add_rule('expire-after-30-days', None, 'Enabled', expiration=LIFETIME_IN_DAYS)
    bucket.configure_lifecycle(lifecycle)


def _sha256_of_file(filename):
    hasher = sha256()
    with open(filename, 'rb') as input_file:
        hasher.update(input_file.read())
    return hasher.hexdigest()


def _delete_file_quietly(filename):
    try:
        _delete_file(filename)
    except (OSError, IOError):
        pass


def _tarball_size():
    kib = stat(NODE_MODULES_TARBALL).st_size // 1024
    return "{} KiB".format(kib)


if __name__ == '__main__':
    # Uses environment variables:
    #   AWS_ACCESS_KEY_ID - AWS Access Key ID
    #   AWS_SECRET_ACCESS_KEY - AWS Secret Access Key
    argv.pop(0)
    if len(argv) != 1:
        raise SystemExit("USAGE: node_modules_cache.py <setup | download | upload>")
    mode = argv.pop()
    conn = S3Connection()
    if mode == 'setup':
        print("Setting up bucket...")
        setup_bucket()
        print("Setup completed successfully.")
    else:
        bucket = conn.lookup(BUCKET_NAME)

        package_json_hash = _sha256_of_file('package.json')
        print('sha256(package.json) = ' + package_json_hash)

        key = Key(bucket)
        key.key = package_json_hash

        if mode == 'download':
            _delete_file_quietly(NEED_TO_UPLOAD_MARKER)
            print("Downloading tarball from S3...")
            # FIXME: On Error: open(NEED_TO_UPLOAD_MARKER, 'a').close()
            # print("Download failed!")
            print("Downloaded {}.".format(_tarball_size()))
            key.get_contents_to_filename(NODE_MODULES_TARBALL)
            print("Extracting tarball...")
            run(['tar', 'xzvf', NODE_MODULES_TARBALL])
            print("node_modules successfully installed from cache.")
        elif mode == 'upload':
            if isfile(NEED_TO_UPLOAD_MARKER):
                print("Creating tarball...")
                run(['tar', 'czf', NODE_MODULES_TARBALL, 'node_modules'])
                print("Uploading tarball to S3... ({})".format(_tarball_size()))
                key.set_contents_from_filename(NODE_MODULES_TARBALL)
                print("node_modules cache successfully updated.")
                _delete_file_quietly(NEED_TO_UPLOAD_MARKER)
            else:
                print("No need to upload anything.")
        else:
            raise SystemExit("Unrecognized mode {!r}".format(mode))
